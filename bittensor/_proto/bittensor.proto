// python3 -m grpc.tools.protoc bittensor/_proto/bittensor.proto  -I. --python_out=. --grpc_python_out=. --proto_path bittensor/_proto/
syntax = "proto3";

/////////////////////////
// Text-to-Image //
/////////////////////////

service TextToImage { rpc Forward (ForwardTextToImageRequest) returns (ForwardTextToImageResponse) {} }

message ForwardTextToImageRequest {
	int32 version = 1;
	string hotkey = 2;
	string text = 3;
	int32 height = 4;
	int32 width = 5;
	int32 num_images_per_prompt = 6;
	int32 num_inference_steps = 7;
	float guidance_scale = 8;
	string negative_prompt = 9; //TODO: investigate if this is the right type see: https://github.com/huggingface/diffusers/blob/82e6fa56f0bfc219c26168a27a8ddb3a5488535e/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion.py#LL546C9-L546C46
	float timeout = 10;
}

message ForwardTextToImageResponse {
	int32 version = 1;
	string hotkey = 2;
	string image = 3; //TODO: make into list of images
	string return_message = 4;
	ReturnCode return_code = 5;
}

/////////////////////////
// Image to Text //
/////////////////////////

service TextToEmbedding { rpc Forward (ForwardTextToEmbeddingRequest) returns (ForwardTextToEmbeddingResponse) {} }

message ForwardTextToEmbeddingRequest {
	int32 version = 1;
	string hotkey = 2;
	repeated string text = 3;
	float timeout = 4;
}

message ForwardTextToEmbeddingResponse {
	int32 version = 1;
	string hotkey = 2;
	Tensor embedding = 3;
	string return_message = 4;
	ReturnCode return_code = 5;
}

/////////////////////////
// Text to Video //
/////////////////////////

service TextToVideo { rpc Forward (ForwardTextToEmbeddingRequest) returns (ForwardTextToEmbeddingResponse) {} }

message ForwardTextToVideoRequest {
	int32 version = 1;
	string hotkey = 2;
	string text = 3;
	int32 num_inference_steps = 4;
	int32 num_frames = 5;
	int32 fps = 6;
	float timeout = 7;
}

message ForwardTextToVideoResponse {
	int32 version = 1;
	string hotkey = 2;
	string video = 3;
	string return_message = 4;
	ReturnCode return_code = 5;
}

/////////////////////////
// Image to Text //
/////////////////////////

service ImageToText { rpc Forward (ForwardImageToTextRequest) returns (ForwardImageToTextResponse) {} }

message ForwardImageToTextRequest {
	int32 version = 1;
	string hotkey = 2;
	bytes image = 3;
	float timeout = 4;
}

message ForwardImageToTextResponse {
	int32 version = 1;
	string hotkey = 2;
	string text = 3;
	string return_message = 4;
	ReturnCode return_code = 5;
}

/////////////////////////
// Text to Speech //
/////////////////////////

service TextToSpeech { rpc Forward (ForwardTextToSpeechRequest) returns (ForwardTextToSpeechResponse) {} }

message ForwardTextToSpeechRequest {
	int32 version = 1;
	string hotkey = 2;
	string text = 3;
	float timeout = 4;
}

message ForwardTextToSpeechResponse {
	int32 version = 1;
	string hotkey = 2;
	string speech = 3;
	string return_message = 4;
	ReturnCode return_code = 5;
}

/////////////////////////
// Speech to Text //
/////////////////////////

service SpeechToText { rpc Forward (ForwardSpeechToTextRequest) returns (ForwardSpeechToTextResponse) {} }

message ForwardSpeechToTextRequest {
	int32 version = 1;
	string hotkey = 2;
	bytes speech = 3;
	float timeout = 4;
}

message ForwardSpeechToTextResponse {
	int32 version = 1;
	string hotkey = 2;
	string text = 3;
	string return_message = 4;
	ReturnCode return_code = 5;
}



/////////////////////////
// TextPrompting //
/////////////////////////
service TextPrompting  {
    rpc Forward (ForwardTextPromptingRequest) returns (ForwardTextPromptingResponse) {}
    rpc MultiForward (MultiForwardTextPromptingRequest) returns (MultiForwardTextPromptingResponse) {}
    rpc Backward (BackwardTextPromptingRequest) returns (BackwardTextPromptingResponse) {}
}
message ForwardTextPromptingRequest {
    int32 version = 1;
    string hotkey = 2;
    repeated string messages = 3;
    float timeout = 4;
}
message ForwardTextPromptingResponse {
    int32 version = 1;
    string hotkey = 2;
    string response = 3;
	string return_message = 4;
	ReturnCode return_code = 5;
}
message MultiForwardTextPromptingRequest {
    int32 version = 1;
    string hotkey = 2;
    repeated string messages = 3;
    float timeout = 4;
}
message MultiForwardTextPromptingResponse {
    int32 version = 1;
    string hotkey = 2;
    repeated string multi_completions = 3;
	string return_message = 4;
	ReturnCode return_code = 5;
}
message BackwardTextPromptingRequest {
    int32 version = 1;
    string hotkey = 2;
	repeated float rewards = 3;
	repeated string messages = 4;
	string response = 5;
    float timeout = 6;
}
message BackwardTextPromptingResponse {
    int32 version = 1;
    string hotkey = 2;
	string return_message = 4;
	ReturnCode return_code = 5;
}



// Return codes from Backward and Forward call.
enum ReturnCode {
	NoReturn = 0; // Default Value
	Success = 1; // Successful query.
	Timeout = 2; // Request timeout.
	Backoff = 3; // Call triggered a backoff.
	Unavailable = 4; // Endpoint not available.
	NotImplemented = 5; // Modality not implemented.
	EmptyRequest = 6; // Request is empty.
	EmptyResponse = 7; // Response is empty.
	InvalidResponse = 8; // Request is invalid.
	InvalidRequest = 9; // Response is invalid.
	RequestShapeException = 10; // Request has invalid shape.
	ResponseShapeException = 11; // Response has invalid shape.
	RequestSerializationException = 12; // Request failed to serialize.
	ResponseSerializationException = 13; // Response failed to serialize.
	RequestDeserializationException = 14; // Request failed to deserialize.
	ResponseDeserializationException = 15; // Response failed to deserialize.
	NotServingNucleus = 16; // Receiving Neuron is not serving a Nucleus to query.
	NucleusTimeout = 17; // Processing on the server side timeout.
	NucleusFull = 18; // Returned when the processing queue on the server is full.
	RequestIncompatibleVersion = 19; // The request handler is incompatible with the request version.
	ResponseIncompatibleVersion = 20; // The request handler is incompatible with the request version.
	SenderUnknown = 21; // The requester is not known by the receiver.
	UnknownException = 22; // Unknown exception.
	Unauthenticated = 23; // Authentication failed.
	BadEndpoint = 24; // Dummy endpoint
	Blacklisted = 25; // Blacklisted
}

/////////////////
// TensorProto //
/////////////////
// A serialized tensor object created using the serializer class.
// SIZE: 32 bytes + variable buffer size.
message Tensor {
	// Version: [REQUIRED] Strictly increasing protocol version identifier.
	// Indentifies protocol version for backward compatibility.
	// i.e. '0.1.5' = (100 * 0) + (10 * 1) + (1 * 5) = 15
	int32 version = 1;

	// Buffer: [REQUIRED] Serialized raw tensor content.
	bytes buffer = 2;

	// Shape: [REQUIRED] Shape of this tensor.
	// NOTE: Variable dimensions (i.e. batch) are non-explicit here as -1.
	// ~ 5 * int32 = 128 bits - (16 bytes)
	repeated int64 shape = 3;

	// Serializer: [REQUIRED] Specifies the serialization/deserialization method.
	// Users should be able to decode all tensors by specifying the encoding type and the raw data. 
	// i.e.
	// 1. (client) serializer = bittensor.bittensor.serializer_for_type(bittensor.Serializer.MSGPACK)
	// 2. (client) serializer.serialize(torch.Tensor, from_type = bittensor.proto.TensorType.TORCH) --> bittensor.proto.Tensor
	// 3. (server) deserializer = bittensor.bittensor.serializer_for_type(request.serialzer)
	// 4. (server) deserializer.deserialize(request.tensor, to_type = bittensor.proto.TensorType.TENSORFLOW) --> tensorflow.Tensor    	
	// SIZE: 32-bits (4 bytes)
	Serializer serializer = 4;

	// TensorType: [REQUIRED] Purely a placeholder, not used in deserialization etc, 
	// however, could come in handy later
	// SIZE: 32-bits (4 bytes)
	TensorType tensor_type = 5;
    	
	// Dtype: [REQUIRED] The tensor datatype.
	// Used for serialization deserialization.
	// int32 32-bits (4-bytes)
	DataType dtype = 6;

	// Requires grad: [OPTIONAL] Does this tensor require a gradient.
	// 1 bit.
	bool requires_grad = 8;
}

enum Serializer {
	// PICKLE = 0; // PICKLE serializer (REMOVED for security reasons.)
	MSGPACK = 0; // MSGPACK serializer
	CMPPACK = 1; // CMPPACK serializer
}

// TensorType: [REQUIRED] The tensor type, for use between multipl frameworks.
enum TensorType {
	TORCH = 0; // Torch object
	TENSORFLOW = 1; // Tensorflow tensor type.
	NUMPY = 2; // Numpy tensor type.
}

// Dtype: [REQUIRED] The tensor datatype.
// Used for serialization deserialization.
// int32 32-bits (4-bytes)
enum DataType {
	UNKNOWN = 0;
	FLOAT32 = 1;
	FLOAT64 = 2;
	INT32 = 3;
	INT64 = 4;
	UTF8 = 5;
	FLOAT16 = 6;
	BOOL = 7;
}


